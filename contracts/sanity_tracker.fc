#include "imports/stdlib.fc";

const op::accumulate = "op::accumulate"c; 

;; storage variables
global int ctx_id; 
global int ctx_tracker; 

() load_data() impure { 
    var ds = get_data().begin_parse(); 

    ctx_id = ds~load_uint(32); 
    ctx_tracker = ds~load_uint(32); 

    ds.end_parse();
}

() save_data() impure {
    set_data( 
        begin_cell() 
            .store_uint(ctx_id, 32) 
            .store_uint(ctx_tracker, 32)
            .end_cell() 
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); 

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); 

    int op = in_msg_body~load_uint(32); 
    int query_id = in_msg_body~load_uint(64); 

    if (op == op::accumulate) { 
        int tracker = in_msg_body~load_uint(32); 
        ctx_tracker += tracker;
        save_data(); 
        return ();
    }

    throw(0xffff); 
}

(int) get_tracker() method_id {
    load_data();
    return ctx_tracker; 
}
