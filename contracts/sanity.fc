#include "imports/stdlib.fc";
const op::add = "op::add"c; 

;; storage variables
global int ctx_id; 
global int ctx_result; ;; the result of the add operation

() load_data() impure { 
    var ds = get_data().begin_parse(); 

    ctx_id = ds~load_uint(32); 
    ctx_result = ds~load_uint(32); 

    ds.end_parse();
}

() save_data() impure {
    set_data( 
        begin_cell() 
            .store_uint(ctx_id, 32) 
            .store_uint(ctx_result, 32)
            .end_cell() 
    );
}

;; custom sum function
(int) sum(int a, int b) { 
    return a + b; 
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4); ;; the first four bits of serialized message contain certain flags, one of which indicates whether the message is bounced
    ;; a message is bounced when a contract receives a bounceable message and throws during its processing
    ;; the bounced message is then returned to sender with `bounced` bit set, this is a way to handle errors in TON

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    load_data(); ;; here we populate the storage variables
    ;; in this case, it could also be done in the single op::increase handler, but generally you would want
    ;; to populate storage variables as soon as all preliminary checks which do not need storage pass

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case
    ;; some contracts do not use query_id at all and do not have it in their messages, but for this one we will be reading it, but not using it

    if (op == op::add) { ;; handle op::increase
        int a = in_msg_body~load_uint(32); ;; read 'a' value
        int b = in_msg_body~load_uint(32); ;; read 'b' value
        ctx_result = sum(a,b);
        ;; ~strdump("before save");  
        save_data(); ;; when we change storage variables, we need to store the changed variables, so we call save_data()
        ;; ~strdump("after save");  
        return (); ;; this message is handled so we return
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
    ;; if the message is bounceable, the contract will then bounce the message to the sender
    ;; and the sender will receive unspent coins and will know that this message failed
    ;; provided of course that the sender has code to handle bounced messages
}

(int) get_result() method_id {
    load_data();
    return ctx_result; 
}